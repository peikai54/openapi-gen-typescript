{"LogoutUser":{"summary":"Logs out current logged in user session","tags":["user"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/user/logout`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/logout';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/logout"},"DeleteOrder":{"summary":"Delete purchase order by ID","tags":["store"],"code":"\nexport const requestPath = [\"orderId\"]\nexport const url = `https://petstore.swagger.io/v2/store/order/{orderId}`\nexport class Path {\n/* ID of the order that needs to be deleted */\norderId: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/store/order/{orderId}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'delete',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/store/order/{orderId}"},"DeleteUser":{"summary":"Delete user","tags":["user"],"code":"\nexport const requestPath = [\"username\"]\nexport const url = `https://petstore.swagger.io/v2/user/{username}`\nexport class Path {\n/* The name that needs to be deleted */\nusername: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/{username}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'delete',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/{username}"},"DeletePet":{"summary":"Deletes a pet","tags":["pet"],"code":"\nexport const requestPath = [\"petId\"]\nexport const url = `https://petstore.swagger.io/v2/pet/{petId}`\nexport class Path {\n/* Pet id to delete */\npetId: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\napi_key?: string;\n}\nexport class Cookie {\n\n}\n\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet/{petId}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'delete',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet/{petId}"},"GetInventory":{"summary":"Returns pet inventories by status","tags":["store"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/store/inventory`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport class Response200 { [key: string]: number;\n }\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200 }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/store/inventory';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/store/inventory"},"CreateUser":{"summary":"Create user","tags":["user"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/user`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.User {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body: Body;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user"},"AddPet":{"summary":"Add a new pet to the store","tags":["pet"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/pet`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.Pet {}\nexport class BodyApplicationXml extends schemas.Pet {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: Body|BodyApplicationXml;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet"},"UpdatePet":{"summary":"Update an existing pet","tags":["pet"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/pet`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.Pet {}\nexport class BodyApplicationXml extends schemas.Pet {}\n\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: Body|BodyApplicationXml;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'put',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet"},"FindPetsByStatus":{"summary":"Finds Pets by status","tags":["pet"],"code":"export const requestQuery = [\"status\"]\n\nexport const url = `https://petstore.swagger.io/v2/pet/findByStatus`\nexport class Path {\n\n}\nexport class Query {\n/* Status values that need to be considered for filter */\nstatus: string;\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport class Response200 extends schemas.Pet {}\nexport class Response200ApplicationXml extends schemas.Pet {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200[]|Response200ApplicationXml[] }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet/findByStatus';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet/findByStatus"},"FindPetsByTags":{"summary":"Finds Pets by tags","tags":["pet"],"code":"export const requestQuery = [\"tags\"]\n\nexport const url = `https://petstore.swagger.io/v2/pet/findByTags`\nexport class Path {\n\n}\nexport class Query {\n/* Tags to filter by */\ntags: string;\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport class Response200 extends schemas.Pet {}\nexport class Response200ApplicationXml extends schemas.Pet {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200[]|Response200ApplicationXml[] }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet/findByTags';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet/findByTags"},"GetPetById":{"summary":"Find pet by ID","tags":["pet"],"code":"\nexport const requestPath = [\"petId\"]\nexport const url = `https://petstore.swagger.io/v2/pet/{petId}`\nexport class Path {\n/* ID of pet to return */\npetId: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport class Response200 extends schemas.Pet {}\nexport class Response200ApplicationXml extends schemas.Pet {}\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200|Response200ApplicationXml }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet/{petId}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet/{petId}"},"UpdatePetWithForm":{"summary":"Updates a pet in the store with form data","tags":["pet"],"code":"\nexport const requestPath = [\"petId\"]\nexport const url = `https://petstore.swagger.io/v2/pet/{petId}`\nexport class Path {\n/* ID of pet that needs to be updated */\npetId: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body { /**\n  * Updated name of the pet\n  */\n\"name\"?: string;\n/**\n  * Updated status of the pet\n  */\n\"status\"?: string;\n }\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: Body;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet/{petId}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet/{petId}"},"GetOrderById":{"summary":"Find purchase order by ID","tags":["store"],"code":"\nexport const requestPath = [\"orderId\"]\nexport const url = `https://petstore.swagger.io/v2/store/order/{orderId}`\nexport class Path {\n/* ID of pet that needs to be fetched */\norderId: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport class Response200 extends schemas.Order {}\nexport class Response200ApplicationXml extends schemas.Order {}\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200|Response200ApplicationXml }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/store/order/{orderId}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/store/order/{orderId}"},"CreateUsersWithListInput":{"summary":"Creates list of users with given input array","tags":["user"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/user/createWithList`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.User {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: Body[];\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/createWithList';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/createWithList"},"GetUserByName":{"summary":"Get user by user name","tags":["user"],"code":"\nexport const requestPath = [\"username\"]\nexport const url = `https://petstore.swagger.io/v2/user/{username}`\nexport class Path {\n/* The name that needs to be fetched. Use user1 for testing.  */\nusername: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport class Response200 extends schemas.User {}\nexport class Response200ApplicationXml extends schemas.User {}\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200|Response200ApplicationXml }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/{username}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/{username}"},"UpdateUser":{"summary":"Updated user","tags":["user"],"code":"\nexport const requestPath = [\"username\"]\nexport const url = `https://petstore.swagger.io/v2/user/{username}`\nexport class Path {\n/* name that need to be updated */\nusername: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.User {}\n\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body: Body;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/{username}';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'put',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/{username}"},"LoginUser":{"summary":"Logs user into the system","tags":["user"],"code":"export const requestQuery = [\"username\", \"password\"]\n\nexport const url = `https://petstore.swagger.io/v2/user/login`\nexport class Path {\n\n}\nexport class Query {\n/* The user name for login */\nusername: string;\n/* The password for login in clear text */\npassword: string;\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\n\nexport type Response200 = string\nexport type Response200ApplicationXml = string\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: any;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200|Response200ApplicationXml }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/login';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'get',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/login"},"CreateUsersWithArrayInput":{"summary":"Creates list of users with given input array","tags":["user"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/user/createWithArray`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.User {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: Body[];\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: any }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/user/createWithArray';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/user/createWithArray"},"PlaceOrder":{"summary":"Place an order for a pet","tags":["store"],"code":"\n\nexport const url = `https://petstore.swagger.io/v2/store/order`\nexport class Path {\n\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body extends schemas.Order {}\nexport class Response200 extends schemas.Order {}\nexport class Response200ApplicationXml extends schemas.Order {}\n\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body: Body;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200|Response200ApplicationXml }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/store/order';\n                  \n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/store/order"},"UploadFile":{"summary":"uploads an image","tags":["pet"],"code":"\nexport const requestPath = [\"petId\"]\nexport const url = `https://petstore.swagger.io/v2/pet/{petId}/uploadImage`\nexport class Path {\n/* ID of pet to update */\npetId: string;\n}\nexport class Query {\n\n}\nexport class RequestHeader {\n\n}\nexport class Cookie {\n\n}\nexport class Body { /**\n  * Additional data to pass to server\n  */\n\"additionalMetadata\"?: string;\n/**\n  * file to upload\n  */\n\"file\"?: string;\n }\nexport class Response200 extends schemas.ApiResponse {}\n\n                export const request = async (options: {\n                  path?: Path;\n                  query?: Query;\n                  body?: Body;\n                  headers?: RequestHeader;\n                  cookie?: Cookie;\n                }, otherOptions?: any): Promise<{ body: Response200 }> =>  {\n                  let resolvedUrl = 'https://petstore.swagger.io/v2/pet/{petId}/uploadImage';\n                  if (!!options.path) {\n                    Object.keys(options.path).map(key => {\n                      const regex = new RegExp(`({(${key})})|(:(${key}))`, 'g');\n                      resolvedUrl = url.replace(regex, options.path[key]);\n                    });\n                  }\n                  return fetchImpl({\n                    url: resolvedUrl, \n                    method: 'post',\n                    ...options, \n                    ...otherOptions \n                  });\n                };\n              ","path":"/pet/{petId}/uploadImage"}}
